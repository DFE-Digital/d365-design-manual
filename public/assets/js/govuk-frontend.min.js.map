{
  "version": 3,
  "sources": ["../../../../../../../node_modules/govuk-frontend/src/govuk/common/govuk-frontend-version.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/common/index.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/errors/index.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/component.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/common/configuration.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/i18n.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/accordion/accordion.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/button/button.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/common/closest-attribute-value.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/character-count/character-count.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/checkboxes/checkboxes.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/error-summary/error-summary.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/exit-this-page/exit-this-page.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/file-upload/file-upload.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/header/header.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/password-input/password-input.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/radios/radios.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/service-navigation/service-navigation.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/skip-link/skip-link.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/components/tabs/tabs.mjs", "../../../../../../../node_modules/govuk-frontend/src/govuk/init.mjs"],
  "sourcesContent": ["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n", "/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @internal\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @template {Partial<Record<keyof ObjectType, unknown>>} [ObjectType=ObjectNested]\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Format error message\n *\n * @internal\n * @param {ComponentWithModuleName} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef ComponentWithModuleName\n * @property {string} moduleName - Name of the component\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * @import { ObjectNested } from './configuration.mjs'\n */\n", "import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @virtual\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { component, identifier, element, expectedType } = messageOrOptions\n\n      message = identifier\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n\n      message = formatErrorMessage(component, message)\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends GOVUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @internal\n   * @param {ComponentWithModuleName | string} componentOrMessage - name of the component module\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            `Root element (\\`$root\\`) already initialised`\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n * @property {ComponentWithModuleName} component - Component throwing the error\n */\n\n/**\n * @import { ComponentWithModuleName } from '../common/index.mjs'\n */\n", "import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  // allows Typescript user to work around the lack of types\n  // in GOVUKFrontend package, Typescript is not aware of $root\n  // in components that extend GOVUKFrontendComponent\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {RootElementType} - the root element of component\n   */\n  get $root() {\n    return this._$root\n  }\n\n  /**\n   * @protected\n   * @type {RootElementType}\n   */\n  _$root\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ChildClassConstructor} */ (\n      this.constructor\n    )\n\n    // TypeScript does not enforce that inheriting classes will define a `moduleName`\n    // (even if we add a `@virtual` `static moduleName` property to this class).\n    // While we trust users to do this correctly, we do a little check to provide them\n    // a helpful error message.\n    //\n    // After this, we'll be sure that `childConstructor` has a `moduleName`\n    // as expected of the `ChildClassConstructor` we've cast `this.constructor` to.\n    if (typeof childConstructor.moduleName !== 'string') {\n      throw new InitError(`\\`moduleName\\` not defined in component`)\n    }\n\n    if (!($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    } else {\n      this._$root = /** @type {RootElementType} */ ($root)\n    }\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const moduleName = childConstructor.moduleName\n\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @private\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const constructor = /** @type {ChildClassConstructor} */ (this.constructor)\n    const moduleName = constructor.moduleName\n\n    if (moduleName && isInitialised(this.$root, moduleName)) {\n      throw new InitError(constructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n\n/**\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n */\n\n/**\n * @typedef {typeof Component & ChildClass} ChildClassConstructor\n */\n", "import { Component } from '../component.mjs'\nimport { ConfigError } from '../errors/index.mjs'\n\nimport { isObject, formatErrorMessage } from './index.mjs'\n\nexport const configOverride = Symbol.for('configOverride')\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {Element & { dataset: DOMStringMap }} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * configOverride\n   *\n   * Function which defines configuration overrides to prioritize\n   * properties from the root element's dataset.\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset. A Symbol\n   * is used for indexing to prevent conflicts.\n   *\n   * @internal\n   * @virtual\n   * @param {Partial<ConfigurationType>} [param] - Configuration object\n   * @returns {Partial<ConfigurationType>} return - Configuration object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [configOverride](param) {\n    return {}\n  }\n\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {ConfigurationType} - the root element of component\n   */\n  get config() {\n    return this._config\n  }\n\n  /**\n   *\n   * @type {ConfigurationType}\n   */\n  _config\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ChildClassConstructor<ConfigurationType>} */ (this.constructor)\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this._$root.dataset)\n    )\n\n    this._config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        childConstructor.defaults,\n        config ?? {},\n        this[configOverride](datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n}\n\n/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {{ schema?: Schema<ConfigurationType>, moduleName: string }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {ConfigurationType} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n * @property {Schema<ConfigurationType>} [schema] - The schema of the component configuration\n * @property {ConfigurationType} [defaults] - The default values of the configuration of the component\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef {typeof Component & ChildClass<ConfigurationType>} ChildClassConstructor<ConfigurationType>\n */\n", "/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && typeof translation === 'object') {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10–12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form – if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (typeof translation === 'object') {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n * @augments ConfigurableComponent<AccordionConfig>\n */\nexport class Accordion extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.i18n = new I18n(this.config.i18n)\n\n    const $sections = this.$root.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$root.insertBefore($accordionControls, this.$root.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          component: Accordion,\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$root.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.name !== 'id') {\n        $button.setAttribute(attr.name, attr.value)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    Array.from($span.childNodes).forEach(($child) =>\n      $headingTextFocus.appendChild($child)\n    )\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.name, attr.value)\n      }\n\n      // Copy original contents of summary to the new summary span\n      Array.from($summary.childNodes).forEach(($child) =>\n        $summarySpanFocus.appendChild($child)\n      )\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.remove()\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const nowExpanded = !this.isExpanded($section)\n    this.setExpanded(nowExpanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section, nowExpanded)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.areAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section, nowExpanded)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  areAllSectionsOpen() {\n    return Array.from(this.$sections).every(($section) =>\n      this.isExpanded($section)\n    )\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Get the identifier for a section\n   *\n   * We need a unique way of identifying each content in the Accordion.\n   * Since an `#id` should be unique and an `id` is required for `aria-`\n   * attributes `id` can be safely used.\n   *\n   * @param {Element} $section - Section element\n   * @returns {string | undefined | null} Identifier for section\n   */\n  getIdentifier($section) {\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n    return $button?.getAttribute('aria-controls')\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @param {boolean} isExpanded - Whether the section is expanded\n   */\n  storeState($section, isExpanded) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        window.sessionStorage.setItem(id, isExpanded.toString())\n      } catch (exception) {}\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        const state = window.sessionStorage.getItem(id)\n\n        if (state !== null) {\n          this.setExpanded(state === 'true', $section)\n        }\n      } catch (exception) {}\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.textContent = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n\n  /**\n   * Accordion config schema\n   *\n   * @constant\n   * @satisfies {Schema<AccordionConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      rememberExpanded: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  validateConfig,\n  ConfigurableComponent,\n  configOverride\n} from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength;\n\n  /**\n   * Character count config override\n   *\n   * To ensure data-attributes take complete precedence, even if they change\n   * the type of count, we need to reset the `maxlength` and `maxwords` from\n   * the JavaScript config.\n   *\n   * @internal\n   * @param {CharacterCountConfig} datasetConfig - configuration specified by dataset\n   * @returns {CharacterCountConfig} - configuration to override by dataset\n   */\n  [configOverride](datasetConfig) {\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * @param {Element | null} $root - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(formatErrorMessage(CharacterCount, errors[0]))\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n", "import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends Component {\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * – for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $root - HTML element to use for checkboxes\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-checkboxes__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n * @augments ConfigurableComponent<ExitThisPageConfig>\n */\nexport class ExitThisPage extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $root - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $button = this.$root.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        component: ExitThisPage,\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.i18n = new I18n(this.config.i18n)\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$root.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another key—so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (event.key === 'Shift' && !this.lastKeyWasModified) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n\n  /**\n   * Exit this page config schema\n   *\n   * @constant\n   * @satisfies {Schema<ExitThisPageConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * File upload component\n *\n * @preserve\n * @augments ConfigurableComponent<FileUploadConfig>\n */\nexport class FileUpload extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {HTMLFileInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   */\n  $button\n\n  /**\n   * @private\n   */\n  $status\n\n  /** @private */\n  i18n\n\n  /** @private */\n  id\n\n  /**\n   * @param {Element | null} $root - File input element\n   * @param {FileUploadConfig} [config] - File Upload config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('input')\n\n    if ($input === null) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File inputs (`<input type=\"file\">`)'\n      })\n    }\n\n    if ($input.type !== 'file') {\n      throw new ElementError(\n        formatErrorMessage(\n          FileUpload,\n          'File input (`<input type=\"file\">`) attribute (`type`) is not `file`'\n        )\n      )\n    }\n\n    this.$input = /** @type {HTMLFileInputElement} */ ($input)\n    this.$input.setAttribute('hidden', 'true')\n\n    if (!this.$input.id) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File input (`<input type=\"file\">`) attribute (`id`)'\n      })\n    }\n\n    this.id = this.$input.id\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    const $label = this.findLabel()\n    // Add an ID to the label if it doesn't have one already\n    // so it can be referenced by `aria-labelledby`\n    if (!$label.id) {\n      $label.id = `${this.id}-label`\n    }\n\n    // we need to copy the 'id' of the root element\n    // to the new button replacement element\n    // so that focus will work in the error summary\n    this.$input.id = `${this.id}-input`\n\n    // Create the file selection button\n    const $button = document.createElement('button')\n    $button.classList.add('govuk-file-upload-button')\n    $button.type = 'button'\n    $button.id = this.id\n    $button.classList.add('govuk-file-upload-button--empty')\n\n    // Copy `aria-describedby` if present so hints and errors\n    // are associated to the `<button>`\n    const ariaDescribedBy = this.$input.getAttribute('aria-describedby')\n    if (ariaDescribedBy) {\n      $button.setAttribute('aria-describedby', ariaDescribedBy)\n    }\n\n    // Create status element that shows what/how many files are selected\n    const $status = document.createElement('span')\n    $status.className = 'govuk-body govuk-file-upload-button__status'\n    $status.setAttribute('aria-live', 'polite')\n    $status.innerText = this.i18n.t('noFileChosen')\n\n    $button.appendChild($status)\n\n    const commaSpan = document.createElement('span')\n    commaSpan.className = 'govuk-visually-hidden'\n    commaSpan.innerText = ', '\n    commaSpan.id = `${this.id}-comma`\n\n    $button.appendChild(commaSpan)\n\n    const containerSpan = document.createElement('span')\n    containerSpan.className =\n      'govuk-file-upload-button__pseudo-button-container'\n\n    const buttonSpan = document.createElement('span')\n    buttonSpan.className =\n      'govuk-button govuk-button--secondary govuk-file-upload-button__pseudo-button'\n    buttonSpan.innerText = this.i18n.t('chooseFilesButton')\n\n    containerSpan.appendChild(buttonSpan)\n\n    // Add a space so the button and instruction read correctly\n    // when CSS is disabled\n    containerSpan.insertAdjacentText('beforeend', ' ')\n\n    const instructionSpan = document.createElement('span')\n    instructionSpan.className =\n      'govuk-body govuk-file-upload-button__instruction'\n    instructionSpan.innerText = this.i18n.t('dropInstruction')\n\n    containerSpan.appendChild(instructionSpan)\n\n    $button.appendChild(containerSpan)\n    $button.setAttribute(\n      'aria-labelledby',\n      `${$label.id} ${commaSpan.id} ${$button.id}`\n    )\n    $button.addEventListener('click', this.onClick.bind(this))\n    $button.addEventListener('dragover', (event) => {\n      // prevent default to allow drop\n      event.preventDefault()\n    })\n\n    // Assemble these all together\n    this.$root.insertAdjacentElement('afterbegin', $button)\n\n    this.$input.setAttribute('tabindex', '-1')\n    this.$input.setAttribute('aria-hidden', 'true')\n\n    // Make all these new variables available to the module\n    this.$button = $button\n    this.$status = $status\n\n    // Bind change event to the underlying input\n    this.$input.addEventListener('change', this.onChange.bind(this))\n\n    // Synchronise the `disabled` state between the button and underlying input\n    this.updateDisabledState()\n    this.observeDisabledState()\n\n    // Handle drop zone visibility\n    // A live region to announce when users enter or leave the drop zone\n    this.$announcements = document.createElement('span')\n    this.$announcements.classList.add('govuk-file-upload-announcements')\n    this.$announcements.classList.add('govuk-visually-hidden')\n    this.$announcements.setAttribute('aria-live', 'assertive')\n    this.$root.insertAdjacentElement('afterend', this.$announcements)\n\n    // if there is no CSS and input is hidden\n    // button will need to handle drop event\n    this.$button.addEventListener('drop', this.onDrop.bind(this))\n\n    // While user is dragging, it gets a little more complex because of Safari.\n    // Safari doesn't fill `relatedTarget` on `dragleave` (nor `dragenter`).\n    // This means we can't use `relatedTarget` to:\n    // - check if the user is still within the wrapper\n    //   (`relatedTarget` being a descendant of the wrapper)\n    // - check if the user is still over the viewport\n    //   (`relatedTarget` being null if outside)\n\n    // Thanks to `dragenter` bubbling, we can listen on the `document` with a\n    // single function and update the visibility based on whether we entered a\n    // node inside or outside the wrapper.\n    document.addEventListener(\n      'dragenter',\n      this.updateDropzoneVisibility.bind(this)\n    )\n\n    // To detect if we're outside the document, we can track if there was a\n    // `dragenter` event preceding a `dragleave`. If there wasn't, this means\n    // we're outside the document.\n    //\n    // The order of events is guaranteed by the HTML specs:\n    // https://html.spec.whatwg.org/multipage/dnd.html#drag-and-drop-processing-model\n    document.addEventListener('dragenter', () => {\n      this.enteredAnotherElement = true\n    })\n\n    document.addEventListener('dragleave', () => {\n      if (!this.enteredAnotherElement && !this.$button.disabled) {\n        this.hideDraggingState()\n        this.$announcements.innerText = this.i18n.t('leftDropZone')\n      }\n\n      this.enteredAnotherElement = false\n    })\n  }\n\n  /**\n   * Updates the visibility of the dropzone as users enters the various elements on the page\n   *\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  updateDropzoneVisibility(event) {\n    if (this.$button.disabled) return\n\n    // DOM interfaces only type `event.target` as `EventTarget`\n    // so we first need to make sure it's a `Node`\n    if (event.target instanceof Node) {\n      if (this.$root.contains(event.target)) {\n        if (event.dataTransfer && isContainingFiles(event.dataTransfer)) {\n          // Only update the class and make the announcement if not already visible\n          // to avoid repeated announcements on NVDA (2024.4) + Firefox (133)\n          if (\n            !this.$button.classList.contains(\n              'govuk-file-upload-button--dragging'\n            )\n          ) {\n            this.showDraggingState()\n            this.$announcements.innerText = this.i18n.t('enteredDropZone')\n          }\n        }\n      } else {\n        // Only hide the dropzone if it is visible to prevent announcing user\n        // left the drop zone when they enter the page but haven't reached yet\n        // the file upload component\n        if (\n          this.$button.classList.contains('govuk-file-upload-button--dragging')\n        ) {\n          this.hideDraggingState()\n          this.$announcements.innerText = this.i18n.t('leftDropZone')\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the drop zone visually\n   */\n  showDraggingState() {\n    this.$button.classList.add('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Hides the drop zone visually\n   */\n  hideDraggingState() {\n    this.$button.classList.remove('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Handles user dropping on the component\n   *\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  onDrop(event) {\n    event.preventDefault()\n\n    if (event.dataTransfer && isContainingFiles(event.dataTransfer)) {\n      this.$input.files = event.dataTransfer.files\n\n      // Dispatch a `change` event so external code that would rely on the `<input>`\n      // dispatching an event when files are dropped still work.\n      // Use a `CustomEvent` so our events are distinguishable from browser's native events\n      this.$input.dispatchEvent(new CustomEvent('change'))\n\n      this.hideDraggingState()\n    }\n  }\n\n  /**\n   * Check if the value of the underlying input has changed\n   */\n  onChange() {\n    const fileCount = this.$input.files.length\n\n    if (fileCount === 0) {\n      // If there are no files, show the default selection text\n      this.$status.innerText = this.i18n.t('noFileChosen')\n      this.$button.classList.add('govuk-file-upload-button--empty')\n    } else {\n      if (\n        // If there is 1 file, just show the file name\n        fileCount === 1\n      ) {\n        this.$status.innerText = this.$input.files[0].name\n      } else {\n        // Otherwise, tell the user how many files are selected\n        this.$status.innerText = this.i18n.t('multipleFilesChosen', {\n          count: fileCount\n        })\n      }\n\n      this.$button.classList.remove('govuk-file-upload-button--empty')\n    }\n  }\n\n  /**\n   * Looks up the `<label>` element associated to the field\n   *\n   * @private\n   * @returns {HTMLElement} The `<label>` element associated to the field\n   * @throws {ElementError} If the `<label>` cannot be found\n   */\n  findLabel() {\n    // Use `label` in the selector so TypeScript knows the type fo `HTMLElement`\n    const $label = document.querySelector(`label[for=\"${this.$input.id}\"]`)\n\n    if (!$label) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: `Field label (\\`<label for=${this.$input.id}>\\`)`\n      })\n    }\n\n    return $label\n  }\n\n  /**\n   * When the button is clicked, emulate clicking the actual, hidden file input\n   */\n  onClick() {\n    this.$input.click()\n  }\n\n  /**\n   * Create a mutation observer to check if the input's attributes altered.\n   */\n  observeDisabledState() {\n    const observer = new MutationObserver((mutationList) => {\n      for (const mutation of mutationList) {\n        if (\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'disabled'\n        ) {\n          this.updateDisabledState()\n        }\n      }\n    })\n\n    observer.observe(this.$input, {\n      attributes: true\n    })\n  }\n\n  /**\n   * Synchronise the `disabled` state between the input and replacement button.\n   */\n  updateDisabledState() {\n    this.$button.disabled = this.$input.disabled\n\n    this.$root.classList.toggle(\n      'govuk-drop-zone--disabled',\n      this.$button.disabled\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-file-upload'\n\n  /**\n   * File upload default config\n   *\n   * @see {@link FileUploadConfig}\n   * @constant\n   * @type {FileUploadConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      chooseFilesButton: 'Choose file',\n      dropInstruction: 'or drop file',\n      noFileChosen: 'No file chosen',\n      multipleFilesChosen: {\n        // the 'one' string isn't used as the component displays the filename\n        // instead, however it's here for coverage's sake\n        one: '%{count} file chosen',\n        other: '%{count} files chosen'\n      },\n      enteredDropZone: 'Entered drop zone',\n      leftDropZone: 'Left drop zone'\n    }\n  })\n\n  /**\n   * File upload config schema\n   *\n   * @constant\n   * @satisfies {Schema<FileUploadConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Checks if the given `DataTransfer` contains files\n *\n * @internal\n * @param {DataTransfer} dataTransfer - The `DataTransfer` to check\n * @returns {boolean} - `true` if it contains files or we can't infer it, `false` otherwise\n */\nfunction isContainingFiles(dataTransfer) {\n  // Safari sometimes does not provide info about types :'(\n  // In which case best not to assume anything and try to set the files\n  const hasNoTypesInfo = dataTransfer.types.length === 0\n\n  // When dragging images, there's a mix of mime types + Files\n  // which we can't assign to the native input\n  const isDraggingFiles = dataTransfer.types.some((type) => type === 'Files')\n\n  return hasNoTypesInfo || isDraggingFiles\n}\n\n/**\n * @typedef {HTMLInputElement & {files: FileList}} HTMLFileInputElement\n */\n\n/**\n * File upload config\n *\n * @see {@link FileUpload.defaults}\n * @typedef {object} FileUploadConfig\n * @property {FileUploadTranslations} [i18n=FileUpload.defaults.i18n] - File upload translations\n */\n\n/**\n * File upload translations\n *\n * @see {@link FileUpload.defaults.i18n}\n * @typedef {object} FileUploadTranslations\n *\n * Messages used by the component\n * @property {string} [chooseFile] - The text of the button that opens the file picker\n * @property {string} [dropInstruction] - The text informing users they can drop files\n * @property {TranslationPluralForms} [multipleFilesChosen] - The text displayed when multiple files\n *   have been chosen by the user\n * @property {string} [noFileChosen] - The text to displayed when no file has been chosen by the user\n * @property {string} [enteredDropZone] - The text announced by assistive technology\n *   when user drags files and enters the drop zone\n * @property {string} [leftDropZone] - The text announced by assistive technology\n *   when user drags files and leaves the drop zone without dropping\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n", "import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends Component {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: Header,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: Header,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Header,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { setFocus } from '../../common/index.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` – in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n * @augments ConfigurableComponent<PasswordInputConfig>\n */\nexport class PasswordInput extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /**\n   * @private\n   * @type {HTMLInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  $showHideButton\n\n  /** @private */\n  $screenReaderStatusMessage\n\n  /**\n   * @param {Element | null} $root - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('.govuk-js-password-input-input')\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-password-input-input`)'\n      })\n    }\n\n    if ($input.type !== 'password') {\n      throw new ElementError(\n        'Password input: Form field (`.govuk-js-password-input-input`) must be of type `password`.'\n      )\n    }\n\n    const $showHideButton = this.$root.querySelector(\n      '.govuk-js-password-input-toggle'\n    )\n    if (!($showHideButton instanceof HTMLButtonElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $showHideButton,\n        expectedType: 'HTMLButtonElement',\n        identifier: 'Button (`.govuk-js-password-input-toggle`)'\n      })\n    }\n\n    if ($showHideButton.type !== 'button') {\n      throw new ElementError(\n        'Password input: Button (`.govuk-js-password-input-toggle`) must be of type `button`.'\n      )\n    }\n\n    this.$input = $input\n    this.$showHideButton = $showHideButton\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Show the toggle button element\n    this.$showHideButton.removeAttribute('hidden')\n\n    // Create and append the status text for screen readers.\n    // This is injected between the input and button so that users get a sensible reading order if\n    // moving through the page content linearly:\n    // [password input] -> [your password is visible/hidden] -> [show/hide password]\n    const $screenReaderStatusMessage = document.createElement('div')\n    $screenReaderStatusMessage.className =\n      'govuk-password-input__sr-status govuk-visually-hidden'\n    $screenReaderStatusMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderStatusMessage = $screenReaderStatusMessage\n    this.$input.insertAdjacentElement('afterend', $screenReaderStatusMessage)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener('click', this.toggle.bind(this))\n\n    // Bind event to revert the password visibility to hidden\n    if (this.$input.form) {\n      this.$input.form.addEventListener('submit', () => this.hide())\n    }\n\n    // If the page is restored from bfcache and the password is visible, hide it again\n    window.addEventListener('pageshow', (event) => {\n      if (event.persisted && this.$input.type !== 'password') {\n        this.hide()\n      }\n    })\n\n    // Default the component to having the password hidden.\n    this.hide()\n  }\n\n  /**\n   * Toggle the visibility of the password input\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  toggle(event) {\n    event.preventDefault()\n\n    // If on this click, the field is type=\"password\", show the value\n    if (this.$input.type === 'password') {\n      this.show()\n      return\n    }\n\n    // Otherwise, hide it\n    // Being defensive - hiding should always be the default\n    this.hide()\n  }\n\n  /**\n   * Show the password input value in plain text.\n   *\n   * @private\n   */\n  show() {\n    this.setType('text')\n  }\n\n  /**\n   * Hide the password input value.\n   *\n   * @private\n   */\n  hide() {\n    this.setType('password')\n  }\n\n  /**\n   * Set the password input type\n   *\n   * @param {'text' | 'password'} type - Input type\n   * @private\n   */\n  setType(type) {\n    if (type === this.$input.type) {\n      return\n    }\n\n    // Update input type\n    this.$input.setAttribute('type', type)\n\n    const isHidden = type === 'password'\n    const prefixButton = isHidden ? 'show' : 'hide'\n    const prefixStatus = isHidden ? 'passwordHidden' : 'passwordShown'\n\n    // Update button text\n    this.$showHideButton.innerText = this.i18n.t(`${prefixButton}Password`)\n\n    // Update button aria-label\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t(`${prefixButton}PasswordAriaLabel`)\n    )\n\n    // Update status change text\n    this.$screenReaderStatusMessage.innerText = this.i18n.t(\n      `${prefixStatus}Announcement`\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Password input config schema\n   *\n   * @constant\n   * @satisfies {Schema<PasswordInputConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. Plain text only.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. Plain text only.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends Component {\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block –\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $root - HTML element to use for radios\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio under the root of another Radio component)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n", "import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Service Navigation component\n *\n * @preserve\n */\nexport class ServiceNavigation extends Component {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Remember the open/closed state of the nav so we can maintain it when the\n   * screen is resized.\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector(\n      '.govuk-js-service-navigation-toggle'\n    )\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-service-navigation-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-service-navigation'\n}\n", "import { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for skip link\n   * @throws {ElementError} when $root is not set or the wrong type\n   * @throws {ElementError} when $root.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    /** @type {URL | undefined} */\n    let url\n\n    /**\n     * Check for valid link URL\n     *\n     * {@link https://caniuse.com/url}\n     * {@link https://url.spec.whatwg.org}\n     *\n     */\n    try {\n      url = new window.URL(this.$root.href)\n    } catch (error) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) is invalid`\n      )\n    }\n\n    // Return early for external URLs or links to other pages\n    if (\n      url.origin !== window.location.origin ||\n      url.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = getFragmentFromUrl(hash)\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n", "import { getBreakpoint, getFragmentFromUrl } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends Component {\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for tabs\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right arrow for next tab\n   * - Press left arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left' and 'Right' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'Left':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'Right':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n", "import { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { FileUpload } from './components/file-upload/file-upload.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { PasswordInput } from './components/password-input/password-input.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { ServiceNavigation } from './components/service-navigation/service-navigation.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element, onError?: OnErrorCallback<CompatibleClass> }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    if (config.onError) {\n      config.onError(new SupportError(), {\n        config\n      })\n    } else {\n      console.log(new SupportError())\n    }\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [FileUpload, config.fileUpload],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [PasswordInput, config.passwordInput],\n    [Radios],\n    [ServiceNavigation],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  // const $scope = config.scope ?? document\n\n  const options = {\n    scope: config.scope ?? document,\n    onError: config.onError\n  }\n\n  components.forEach(([Component, config]) => {\n    createAll(Component, config, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass} ComponentClass\n * @param {ComponentClass} Component - class of the component to create\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass> | Element | Document | CreateAllOptions<ComponentClass> } [createAllOptions] - options for createAll including scope of the document to search within and callback function if error throw by component on init\n * @returns {Array<InstanceType<ComponentClass>>} - array of instantiated components\n */\nfunction createAll(Component, config, createAllOptions) {\n  let /** @type {Element | Document} */ $scope = document\n  let /** @type {OnErrorCallback<Component> | undefined} */ onError\n\n  if (typeof createAllOptions === 'object') {\n    createAllOptions = /** @type {CreateAllOptions<Component>} */ (\n      // eslint-disable-next-line no-self-assign\n      createAllOptions\n    )\n\n    $scope = createAllOptions.scope ?? $scope\n    onError = createAllOptions.onError\n  }\n\n  if (typeof createAllOptions === 'function') {\n    onError = createAllOptions\n  }\n\n  if (createAllOptions instanceof HTMLElement) {\n    $scope = createAllOptions\n  }\n\n  const $elements = $scope.querySelectorAll(\n    `[data-module=\"${Component.moduleName}\"]`\n  )\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    if (onError) {\n      onError(new SupportError(), {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(new SupportError())\n    }\n    return []\n  }\n\n  /* eslint-disable-next-line @typescript-eslint/no-unsafe-return --\n   * We can't define CompatibleClass as `{new(): CompatibleClass, moduleName: string}`,\n   * as when doing `typeof Accordion` (or any component), TypeScript doesn't seem\n   * to acknowledge the static `moduleName` that's set in our component classes.\n   * This means we have to set the constructor of `CompatibleClass` as `{new(): any}`,\n   * leading to ESLint frowning that we're returning `any[]`.\n   */\n  return Array.from($elements)\n    .map(($element) => {\n      try {\n        // Only pass config to components that accept it\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return typeof config !== 'undefined'\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        if (onError) {\n          onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter(Boolean) // Exclude components that errored\n}\n\nexport { initAll, createAll }\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef {{new (...args: any[]): any, moduleName: string}} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {FileUploadConfig} [fileUpload] - File Upload config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n * @property {PasswordInputConfig} [passwordInput] - Password input config\n */\n\n/**\n * Config for individual components\n *\n * @import { AccordionConfig } from './components/accordion/accordion.mjs'\n * @import { ButtonConfig } from './components/button/button.mjs'\n * @import { CharacterCountConfig } from './components/character-count/character-count.mjs'\n * @import { ErrorSummaryConfig } from './components/error-summary/error-summary.mjs'\n * @import { ExitThisPageConfig } from './components/exit-this-page/exit-this-page.mjs'\n * @import { NotificationBannerConfig } from './components/notification-banner/notification-banner.mjs'\n * @import { PasswordInputConfig } from './components/password-input/password-input.mjs'\n * @import { FileUploadConfig } from './components/file-upload/file-upload.mjs'\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {ComponentConfig<ComponentClass>} config - Config supplied to component\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document} [scope] - scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - callback function if error throw by component on init\n */\n"],
  "mappings": "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",
  "names": ["version", "getFragmentFromUrl", "url", "includes", "split", "pop", "getBreakpoint", "name", "property", "value", "window", "getComputedStyle", "document", "documentElement", "getPropertyValue", "undefined", "setFocus", "$element", "options", "_options$onBeforeFocu", "isFocusable", "getAttribute", "onBlur", "_options$onBlur", "call", "removeAttribute", "setAttribute", "addEventListener", "once", "onBeforeFocus", "focus", "isSupported", "$scope", "body", "classList", "contains", "isObject", "option", "Array", "isArray", "formatErrorMessage", "Component", "message", "moduleName", "GOVUKFrontendError", "Error", "constructor", "args", "super", "this", "SupportError", "supportMessage", "HTMLScriptElement", "prototype", "ConfigError", "ElementError", "messageOrOptions", "component", "identifier", "element", "expectedType", "InitError", "componentOrMessage", "$root", "_$root", "childConstructor", "elementType", "checkSupport", "checkInitialised", "HTMLElement", "hasAttribute", "configOverride", "Symbol", "for", "ConfigurableComponent", "param", "config", "_config", "defaults", "datasetConfig", "dataset", "schema", "out", "entries", "Object", "properties", "entry", "namespace", "field", "toString", "normaliseString", "type", "extractConfigByNamespace", "mergeConfigs", "trimmedValue", "trim", "output", "outputType", "length", "isFinite", "Number", "configObjects", "formattedConfigObject", "configObject", "key", "keys", "override", "newObject", "current", "keyParts", "index", "I18n", "translations", "_config$locale", "locale", "lang", "t", "lookupKey", "translation", "count", "translationPluralForm", "getPluralSuffix", "match", "replacePlaceholders", "translationString", "formatter", "Intl", "NumberFormat", "supportedLocalesOf", "replace", "placeholderWithBraces", "placeholderKey", "hasOwnProperty", "placeholderValue", "format", "hasIntlPluralRulesSupport", "Boolean", "PluralRules", "preferredForm", "select", "selectPluralFormUsingFallbackRules", "console", "warn", "Math", "abs", "floor", "ruleset", "getPluralRulesForLocale", "pluralRules", "localeShort", "pluralRule", "pluralRulesMap", "languages", "arabic", "chinese", "french", "german", "irish", "russian", "scottish", "spanish", "welsh", "n", "lastTwo", "last", "Accordion", "i18n", "controlsClass", "showAllClass", "showAllTextClass", "sectionClass", "sectionExpandedClass", "sectionButtonClass", "sectionHeaderClass", "sectionHeadingClass", "sectionHeadingDividerClass", "sectionHeadingTextClass", "sectionHeadingTextFocusClass", "sectionShowHideToggleClass", "sectionShowHideToggleFocusClass", "sectionShowHideTextClass", "upChevronIconClass", "downChevronIconClass", "sectionSummaryClass", "sectionSummaryFocusClass", "sectionContentClass", "$sections", "$showAllButton", "$showAllIcon", "$showAllText", "querySelectorAll", "initControls", "initSectionHeaders", "updateShowAllButton", "areAllSectionsOpen", "createElement", "add", "appendChild", "$accordionControls", "insertBefore", "firstChild", "onShowOrHideAllToggle", "event", "onBeforeMatch", "forEach", "$section", "i", "$header", "querySelector", "constructHeaderMarkup", "setExpanded", "isExpanded", "onSectionToggle", "setInitialState", "$span", "$heading", "$summary", "$button", "id", "attr", "from", "attributes", "$headingText", "$headingTextFocus", "childNodes", "$child", "$showHideToggle", "$showHideToggleFocus", "$showHideText", "$showHideIcon", "getButtonPunctuationEl", "$summarySpan", "$summarySpanFocus", "remove", "removeChild", "$fragment", "target", "Element", "closest", "nowExpanded", "storeState", "expanded", "$content", "newButtonText", "textContent", "ariaLabelParts", "push", "ariaLabelMessage", "join", "every", "toggle", "getIdentifier", "rememberExpanded", "sessionStorage", "setItem", "exception", "state", "getItem", "$punctuationEl", "freeze", "hideAllSections", "hideSection", "hideSectionAriaLabel", "showAllSections", "showSection", "showSectionAriaLabel", "Button", "debounceFormSubmitTimer", "handleKeyDown", "debounce", "$target", "preventDefault", "click", "preventDoubleClick", "setTimeout", "DEBOUNCE_TIMEOUT_IN_SECONDS", "closestAttributeValue", "attributeName", "$closestElementWithAttribute", "CharacterCount", "configOverrides", "maxlength", "maxwords", "_ref", "_this$config$maxwords", "$textarea", "$visibleCountMessage", "$screenReaderCountMessage", "lastInputTimestamp", "lastInputValue", "valueChecker", "maxLength", "HTMLTextAreaElement", "HTMLInputElement", "errors", "validationErrors", "conditions", "required", "errorMessage", "Infinity", "textareaDescriptionId", "$textareaDescription", "getElementById", "insertAdjacentElement", "className", "bindChangeEvents", "updateCountMessage", "handleKeyUp", "handleFocus", "handleBlur", "updateVisibleCountMessage", "Date", "now", "setInterval", "updateIfValueChanged", "clearInterval", "updateScreenReaderCountMessage", "isError", "isOverThreshold", "getCountMessage", "text", "_text$match", "remainingNumber", "countType", "formatCountMessage", "translationKeySuffix", "threshold", "currentLength", "charactersUnderLimit", "one", "other", "charactersAtLimit", "charactersOverLimit", "wordsUnderLimit", "wordsAtLimit", "wordsOverLimit", "textareaDescription", "anyOf", "Checkboxes", "$inputs", "$input", "targetId", "syncAllConditionalReveals", "handleClick", "syncConditionalRevealWithInputState", "inputIsChecked", "checked", "unCheckAllInputsExcept", "$inputWithSameName", "form", "unCheckExclusiveInputs", "$exclusiveInput", "$clickedInput", "ErrorSummary", "disableAutoFocus", "focusTarget", "HTMLAnchorElement", "inputId", "href", "$legendOrLabel", "getAssociatedLegendOrLabel", "scrollIntoView", "preventScroll", "_document$querySelect", "$fieldset", "$legends", "getElementsByTagName", "$candidateLegend", "legendTop", "getBoundingClientRect", "top", "inputRect", "height", "innerHeight", "ExitThisPage", "$skiplinkButton", "$updateSpan", "$indicatorContainer", "$overlay", "keypressCounter", "lastKeyWasModified", "timeoutTime", "keypressTimeoutId", "timeoutMessageId", "buildIndicator", "initUpdateSpan", "initButtonClickHandler", "handleKeypress", "bind", "govukFrontendExitThisPageKeypress", "resetPage", "$indicator", "updateIndicator", "exitPage", "location", "resetKeypressTimer", "clearTimeout", "setKeypressTimer", "shiftKey", "activated", "timedOut", "pressTwoMoreTimes", "pressOneMoreTime", "FileUpload", "$status", "$label", "findLabel", "ariaDescribedBy", "innerText", "commaSpan", "containerSpan", "buttonSpan", "insertAdjacentText", "instructionSpan", "onClick", "onChange", "updateDisabledState", "observeDisabledState", "$announcements", "onDrop", "updateDropzoneVisibility", "enteredAnotherElement", "disabled", "hideDraggingState", "Node", "dataTransfer", "isContainingFiles", "showDraggingState", "files", "dispatchEvent", "CustomEvent", "fileCount", "MutationObserver", "mutationList", "mutation", "observe", "hasNoTypesInfo", "types", "isDraggingFiles", "some", "chooseFilesButton", "dropInstruction", "noFileChosen", "multipleFilesChosen", "enteredDropZone", "leftDropZone", "Header", "$menuButton", "$menu", "menuIsOpen", "mql", "menuId", "setupResponsiveChecks", "handleMenuButtonClick", "breakpoint", "matchMedia", "checkMode", "addListener", "matches", "NotificationBanner", "PasswordInput", "$showHideButton", "$screenReaderStatusMessage", "HTMLButtonElement", "hide", "persisted", "show", "setType", "isHidden", "prefixButton", "prefixStatus", "showPassword", "hidePassword", "showPasswordAriaLabel", "hidePasswordAriaLabel", "passwordShownAnnouncement", "passwordHiddenAnnouncement", "Radios", "$allInputs", "$clickedInputForm", "$clickedInputName", "hasSameFormOwner", "ServiceNavigation", "SkipLink", "_this$$root$getAttrib", "hash", "URL", "error", "origin", "pathname", "linkedElementId", "$linkedElement", "Tabs", "$tabs", "$tabList", "$tabListItems", "jsHiddenClass", "changingHash", "boundTabClick", "boundTabKeydown", "boundOnHashChange", "onTabClick", "onTabKeydown", "onHashChange", "_this$mql", "setup", "teardown", "_this$getTab", "$item", "$tab", "setAttributes", "hideTab", "$activeTab", "getTab", "showTab", "removeEventListener", "unsetAttributes", "$tabWithHash", "$previousTab", "getCurrentTab", "unhighlightTab", "hidePanel", "highlightTab", "showPanel", "panelId", "$panel", "getPanel", "$currentTab", "$nextTab", "currentTarget", "createHistoryEntry", "activatePreviousTab", "activateNextTab", "parentElement", "$nextTabListItem", "nextElementSibling", "$previousTabListItem", "previousElementSibling", "initAll", "_config$scope", "onError", "log", "components", "accordion", "button", "characterCount", "errorSummary", "exitThisPage", "fileUpload", "notificationBanner", "passwordInput", "scope", "createAll", "createAllOptions", "_createAllOptions$sco", "$elements", "map", "filter"]
}
