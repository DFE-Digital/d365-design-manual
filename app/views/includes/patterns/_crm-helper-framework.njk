{% set updateContactRecordExample %}
{% raw %}
{% extends 'DfE/Layouts/2ColumnWideLeft' %}

{% block title %}
  {% assign title = page.title | split: ":" %}
  <h1 class="govuk-heading-l">
    <span class="govuk-caption-l">{{ title[0] }}</span>
    {{ title[1] }}
  </h1>
{% endblock %}
 
{% block main %}
  {% unless user %}
    <script>
      window.location.href="{{ sitemarkers['DfE/Error/AccessDenied'].url }}"
    </script>
  {% endunless %}

  {% unless params.contactid %}
    <script>
      window.location.href="{{ sitemarkers['DfE/Error/RecordNotFound'].url }}"
    </script>
  {% endunless %}

  <div class="govuk-form-group">
    <label class="govuk-label" for="firstname">
      What is your first name?
    </label>
    <input class="govuk-input" id="firstname" name="firstname" type="text">
  </div>

  <div class="govuk-form-group">
    <label class="govuk-label" for="lastname">
      What is your last name?
    </label>
    <input class="govuk-input" id="lastname" name="lastname" type="text">
  </div>

  <button type="submit" id="submit-btn" class="govuk-button" data-module="govuk-button">Continue</button>
  
  <div id="loading-spinner" class="loader govuk-visually-hidden"></div>

  <script type="text/javascript">
    // Define the validation data object
    const inputObj = [
      {
        identifier: "firstname",
        type: "text",
        friendlyName: "your first name",
        required: true,
        resolve: false
      },
      {
        identifier: "lastname",
        type: "text",
        friendlyName: "your last name",
        required: true,
        resolve: false
      }
    ];

    // Attach event handler to the submit button
    $("#submit-btn").on("click", async function(event) {
      event.preventDefault();

      // Disable the button and show the spinner
      DfEPortal.DisableButton("submit-btn");
      DfEPortal.ShowLoadingSpinner("loading-spinner");

      try {
        // Validate the input data
        await DfEPortal.ValidateData(inputObj);

        // Construct the data object for submission
        const dataObj = await DfEPortal.WebApi.ConstructData(inputObj);

        // Retrieve the contact ID (e.g. from a URL parameter using Liquid)
        const contactId = "{{ params.contactid }}";
        const entityName = "contact";

        // Update the contact record
        await DfEPortal.WebApi.Update(contactId, entityName, dataObj);

        // Redirect or notify the user of success
        alert("Contact updated successfully!");
        // Optionally redirect: window.location.href = "{{ sitemarkers['NEXT_PAGE_SITEMARKER'].url | add_query: 'contactid', params.contactid }}";

      } catch (error) {
        console.error("Error:", error);
        // The framework automatically displays user-friendly error messages
        // Re-enable the button and hide the spinner
        DfEPortal.EnableButton("submit-btn");
        DfEPortal.HideLoadingSpinner("loading-spinner");
      }
    });
  </script>
{% endblock %}
{% endraw %}
{% endset %}

{% set createLeadRecordExample %}
{% raw %}
{% extends 'DfE/Layouts/2ColumnWideLeft' %}

{% block title %}{% endblock %}
 
{% block main %}

  <div class="govuk-form-group">
    <h1 class="govuk-label-wrapper">
      <label class="govuk-label govuk-label--l" for="emailaddress">
        ## 'What is your email address?' set as the title in the content web page
        {{ page.title }}
      </label>
    </h1>
    <input class="govuk-input" id="emailaddress" name="emailaddress" type="email">
  </div>

  <button type="submit" id="submit-btn" class="govuk-button" data-module="govuk-button">Continue</button>
  
  <div id="loading-spinner" class="loader govuk-visually-hidden"></div>

  <script type="text/javascript">
    // Define the validation data object
    const inputObj = [
      {
        identifier: "emailaddress",
        type: "email",
        friendlyName: "your email address",
        required: true,
        resolve: false
      }
    ];

    // Attach event handler to the submit button
    $("#submit-btn").on("click", async function(event) {
      event.preventDefault();

      // Disable the button and show the spinner
      DfEPortal.DisableButton("submit-btn");
      DfEPortal.ShowLoadingSpinner("loading-spinner");

      try {
        // Validate the input data
        await DfEPortal.ValidateData(inputObj);

        // Construct the data object for submission
        const dataObj = await DfEPortal.WebApi.ConstructData(inputObj);

        // Create the lead record
        const entityName = "lead";
        const leadId = await DfEPortal.WebApi.Create(entityName, dataObj);

        // Redirect or notify the user of success
        alert("Lead created successfully!");
        // Optionally redirect: window.location.href = `{{ sitemarkers['NEXT_PAGE_SITEMARKER'].url }}?leadid=${leadId}`;

      } catch (error) {
        console.error("Error:", error);
        // The framework automatically displays user-friendly error messages
        // Re-enable the button and hide the spinner
        DfEPortal.EnableButton("submit-btn");
        DfEPortal.HideLoadingSpinner("loading-spinner");
      }
    });
  </script>
{% endblock %}
{% endraw %}
{% endset %}

{% macro patternsUpdateContactRecordExample () %}
<pre><code>{{ updateContactRecordExample }}</code></pre>
{% endmacro %}

{% macro patternsCreateLeadRecordExample () %}
<pre><code>{{ createLeadRecordExample }}</code></pre>
{% endmacro %}
